- platform: darksky
  api_key: [API KEY]
  name: weather
  monitored_conditions:
    - temperature
    - apparent_temperature
    - wind_speed
    - cloud_cover
    - humidity
    - pressure

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: disk_free
      arg: /
    - type: memory_use_percent
    - type: memory_free
    - type: processor_use
    - type: since_last_boot

- platform: yr

### Room EG-120 ###
- platform: mqtt
  state_topic: "hhz/120/1/1/1/0/#"
  name: "120 Motion A"
- platform: mqtt
  state_topic: "hhz/120/5/1/1/0/#"
  name: "120 Motion B"
- platform: mqtt
  state_topic: "hhz/120/9/1/1/0/#"
  name: "120 Motion C"
- platform: mqtt
  state_topic: "hhz/120/13/1/1/0/#"
  name: "120 Motion D"
- platform: mqtt
  state_topic: "hhz/120/2/0/1/0/#"
  name: "120 Hum A"
  unit_of_measurement: "%"
- platform: mqtt
  state_topic: "hhz/120/6/0/1/0/#"
  name: "120 Hum B"
  unit_of_measurement: "%"
- platform: mqtt
  state_topic: "hhz/120/2/1/1/0/#"
  name: "120 Temp A"
  unit_of_measurement: "°C"
- platform: mqtt
  state_topic: "hhz/120/6/1/1/0/#"
  name: "120 Temp B"
  unit_of_measurement: "°C"
- platform: mqtt
  state_topic: "hhz/120/3/1/1/0/#"
  name: "120 Light A"
  unit_of_measurement: "Lx"
- platform: mqtt
  state_topic: "hhz/120/7/1/1/0/#"
  name: "120 Light B"
  unit_of_measurement: "Lx"
- platform: mqtt
  state_topic: "hhz/120/4/1/1/0/#"
  name: "120 Co2 A"
  unit_of_measurement: "ppm"

### Raum EG-125 ###
- platform: mqtt
  state_topic: "hhz/125/1/1/1/0/#"
  name: "125 Motion A"
- platform: mqtt
  state_topic: "hhz/125/5/1/1/0/#"
  name: "125 Motion B"
- platform: mqtt
  state_topic: "hhz/125/9/1/1/0/#"
  name: "125 Motion C"
- platform: mqtt
  state_topic: "hhz/125/13/1/1/0/#"
  name: "125 Motion D"
- platform: mqtt
  state_topic: "hhz/125/2/0/1/0/#"
  name: "125 Hum A"
  unit_of_measurement: "%"
- platform: mqtt
  state_topic: "hhz/125/6/0/1/0/#"
  name: "125 Hum B"
  unit_of_measurement: "%"
- platform: mqtt
  state_topic: "hhz/125/2/1/1/0/#"
  name: "125 Temp A"
  unit_of_measurement: "°C"
- platform: mqtt
  state_topic: "hhz/125/6/1/1/0/#"
  name: "125 Temp B"
  unit_of_measurement: "°C"
- platform: mqtt
  state_topic: "hhz/125/3/1/1/0/#"
  name: "125 Light A"
  unit_of_measurement: "Lx"
- platform: mqtt
  state_topic: "hhz/125/7/1/1/0/#"
  name: "125 Light B"
  unit_of_measurement: "Lx"
- platform: mqtt
  state_topic: "hhz/125/4/1/1/0/#"
  name: "125 Co2 A"
  unit_of_measurement: "ppm"


- platform: mqtt
  state_topic: "hhz/125/window/#"
  name: "125 Janitor Service Windows State"
- platform: mqtt
  state_topic: "hhz/125/door/#"
  name: "125 Janitor Service Door State"
- platform: mqtt
  state_topic: "hhz/125/temperature/#"
  name: "125 Janitor Service Temp"
  unit_of_measurement: "°C"

### Room EG-126 ###
- platform: mqtt
  state_topic: "hhz/126_2/1/1/1/0/#"
  name: "126_2 Motion A"
- platform: mqtt
  state_topic: "hhz/126_2/5/1/1/0/#"
  name: "126_2 Motion B"
- platform: mqtt
  state_topic: "hhz/126_2/2/0/1/0/#"
  name: "126_2 Hum A"
  unit_of_measurement: "%"
- platform: mqtt
  state_topic: "hhz/126_2/2/1/1/0/#"
  name: "126_2 Temp A"
  unit_of_measurement: "°C"
- platform: mqtt
  state_topic: "hhz/126_2/3/1/1/0/#"
  name: "126_2 Light A"
  unit_of_measurement: "Lx"
- platform: mqtt
  state_topic: "hhz/126_2/4/1/1/0/#"
  name: "126_2 Co2 A"
  unit_of_measurement: "ppm"

- platform: time_date
  display_options:
    - 'time'

# counts how often the break request switch has been toggled
- platform: statistics
  name: breakrequeststatistics
  friendly_name: Break requests statistics
  entity_id: input_boolean.breakrequest

# Timer is started when lecture switch is toggled. Template displays minutes since stopwatch has been started
- platform: template
  sensors:
    stopwatch:
      friendly_name: "Timer"
      value_template: >
        {% if is_state('input_boolean.stopwatch', 'on') %}
          {{ ((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) | round | int }}
        {% elif is_state('sensor.stopwatch', 'unknown') %}
          0
        {% else %}
          {{ states('sensor.stopwatch') }}
        {% endif %}
      icon_template: mdi:clock
      unit_of_measurement: 'min'
      entity_id:
        - automation.stopwatch_start
        - automation.stopwatch_update
        - automation.stopwatch_stop
# Template calculates score based on time (+1/min), break requests (+5), brightness (+0/+10/+20) and air quality (+0/+25/+50)
    breakscore:
      friendly_name: "Break score"
      value_template: >
        {% if is_state('input_boolean.stopwatch', 'on') %}
          {%if states('sensor.125_light_a') | int < 200 %}
            {% if states('sensor.125_co2_a') | int < 600 %} 
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count) + 20) | round | int }}
            {% elif states('sensor.125_co2_a') | int < 1000 %} 
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count) + 45) | round | int }}
            {% else %}
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count) + 70) | round | int }}
            {% endif %}
          {% elif states('sensor.125_light_a') | int < 600 %}
            {% if states('sensor.125_co2_a') | int < 600 %} 
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count) + 10) | round | int }}
            {% elif states('sensor.125_co2_a') | int < 1000 %} 
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count) + 35) | round | int }}
            {% else %}
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count) + 60) | round | int }}
            {% endif %}
          {% else %}
            {% if states('sensor.125_co2_a') | int < 600 %} 
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count)) | round | int }}
            {% elif states('sensor.125_co2_a') | int < 1000 %} 
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count) + 25) | round | int }}
            {% else %}
              {{ (((now() - states.automation.stopwatch_start.attributes.last_triggered).total_seconds()/60) + (5 * states.sensor.breakrequeststatistics_mean.attributes.count) + 50) | round | int }}
            {% endif %}
          {% endif %}
        {% elif is_state('sensor.stopwatch', 'unknown') %}
          0
        {% else %}
          {{ states('sensor.breakscore') }}
        {% endif %}
      icon_template: mdi:gauge
      entity_id:
        - automation.stopwatch_start
        - automation.stopwatch_update
        - automation.stopwatch_stop
# every break request toggles the "breakrequest" switch, breakrequeststatistics counts these toggles and displays the value
    breakrequestcount:
      friendly_name: Break request count
      value_template: > 
        {% if is_state('input_boolean.stopwatch', 'on') %}
          {{ states.sensor.breakrequeststatistics_mean.attributes.count }}
        {% elif is_state('sensor.stopwatch', 'unknown') %}
          0
        {% else %}
          {{ states('sensor.breakrequestcount') }}
        {% endif %}
